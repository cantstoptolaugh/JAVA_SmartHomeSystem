
package VisitorAccess;

import SmartHome.LoginForm;
import MainDisplay.MainDisplay;

import VisitorAccess.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class OpenDoor extends javax.swing.JFrame {
    
    // DefaultTableModel, Timestamp, SimpleDateFormat 객체 초기화 및 생성
    
    DefaultTableModel dtm;
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());
    SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
    
    // 로그인 파일 읽기 위한 File 객체
    File user_info;
    
    // 세션 id 읽기 위한 변수 id
    String id = LoginForm.SessionID;
    
    // 가족 확인 위한 family 배열
    String[] family;
    
    // 로그인 파일에서 가족 구성원들을 배열 형태로 리턴
    public String[] familyList() {
        
      try { 
            // 로그인 객체 생성 및 sessionID 설정
            LoginForm log = new LoginForm(); 
            
            // 가족은 4개의 배열
            family = new String[4];
            
            // 세션 id의 로그인 파일 생성
            user_info = new File(id+".txt");
            
            // 로그인 파일 scan
            Scanner scan = new Scanner(user_info);
            
            // 스캔 한 파일 하나씩 읽으며 가족 구성원 이름에 따라 배열에 추가
            while (scan.hasNext()) {
                String str = scan.next();
                if (str.equals(id)) {
                }
                if (str.equals("아버지")) {
                    family[0] = "아버지";
                }
                if (str.equals("어머니")) {
                    family[1] = "어머니";
                }
                if (str.equals("자녀1")) {
                    family[2] = "자녀1";
                }
                if (str.equals("자녀2")) {
                    family[3] = "자녀2";
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(OpenDoor.class.getName()).log(Level.SEVERE, null, ex);
        }
      // family 배열 리턴
      return family;
    }
    
    /**
     * Creates new form Visitor
     */
    //제목설정 / 화면 정중앙에 프로그램 출력
    public OpenDoor() {
        initComponents();
        setTitle("방문자 관리");
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        father = new javax.swing.JButton();
        mother = new javax.swing.JButton();
        brother = new javax.swing.JButton();
        sister = new javax.swing.JButton();
        outer = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("맑은 고딕", 1, 24)); // NOI18N
        jButton1.setText("전체 방문자 확인");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "방문자 출입 확인", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("맑은 고딕", 1, 14))); // NOI18N

        father.setBackground(new java.awt.Color(204, 204, 255));
        father.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        father.setText("아버지");
        father.setBorder(null);
        father.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fatherActionPerformed(evt);
            }
        });

        mother.setBackground(new java.awt.Color(204, 204, 255));
        mother.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        mother.setText("어머니");
        mother.setBorder(null);
        mother.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motherActionPerformed(evt);
            }
        });

        brother.setBackground(new java.awt.Color(204, 204, 255));
        brother.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        brother.setText("자녀1");
        brother.setBorder(null);
        brother.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brotherActionPerformed(evt);
            }
        });

        sister.setBackground(new java.awt.Color(204, 204, 255));
        sister.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        sister.setText("자녀2");
        sister.setBorder(null);
        sister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sisterActionPerformed(evt);
            }
        });

        outer.setBackground(new java.awt.Color(204, 204, 255));
        outer.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        outer.setText("외부인");
        outer.setBorder(null);
        outer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(brother, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(father, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sister, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mother, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outer, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mother, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(father, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sister, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(brother, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(outer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jButton2.setText("뒤로가기");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outerActionPerformed
        
        familyList();
 
        LoginForm lf = new LoginForm();
        // 팩토리 객체 VisitorAccessTrace
        VisitorAccessTrace vat = new VisitorAccessTrace();
        
        // VisitorAccess 객체 생성 후 인자에 VisitorAccessTrace 추가
        VisitorAccess visitorAccess = new VisitorAccess(vat);
        
        // 첫번째 방문자 객체를 생성
        Visitor v = visitorAccess.checkVisitor("외부인");
        
         if(v instanceof Outer) {
            JOptionPane.showMessageDialog(null, "외부인임을 감지하였습니다. 문을 닫습니다.", "Result", JOptionPane.WARNING_MESSAGE);
         try { 
            String member = v.getOuter();
            
            long timestamp = System.currentTimeMillis();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String date = dateFormat.format(timestamp);
            
            File familyListFile = new File(id+"List.txt");
            
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(familyListFile, true));
            
            if (familyListFile.isFile() && familyListFile.canWrite()) {
                    bufferedWriter.write(member);
                    bufferedWriter.write(" ");
                    bufferedWriter.write(date);
                    bufferedWriter.write(" ");

                    bufferedWriter.newLine();
                    bufferedWriter.close();
            }
            
        } catch(IOException e) {
            System.out.println(e);
        }
        }        
    }//GEN-LAST:event_outerActionPerformed

    // mother, father, brother, sister 모두 같은 로직
    private void motherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motherActionPerformed
        
        // 가족 배열 가져옴
        familyList();
       
        // 로그인 객체 생성 
        LoginForm lf = new LoginForm();
        
        // 팩토리 객체 VisitorAccessTrace
        VisitorAccessTrace vat = new VisitorAccessTrace();
        
        // VisitorAccess 객체 생성 후 인자에 VisitorAccessTrace 추가
        VisitorAccess visitorAccess = new VisitorAccess(vat);
        
        // 첫번째 방문자 객체를 생성
        try {
            Visitor v = visitorAccess.checkVisitor(family[1]);
            // 만약 v가 Family 객체에 속한다면 문이 열리고 닫히며, 해당 가족 구성원의 이름과 타임스탬프가 테이블에 기록
        if (v instanceof Family) {
            JOptionPane.showMessageDialog(null, "문이 열립니다.", "Result", JOptionPane.WARNING_MESSAGE);
            JOptionPane.showMessageDialog(null, v.getFamily() + "님이 방문하셨습니다.", "Result", JOptionPane.WARNING_MESSAGE);
            JOptionPane.showMessageDialog(null, "문이 닫힙니다.", "Result", JOptionPane.WARNING_MESSAGE);     
        try { 
            String member = v.getFamily();
            long timestamp = System.currentTimeMillis();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String date = dateFormat.format(timestamp);
            
            File familyListFile = new File(id+"List.txt");
            
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(familyListFile, true));
            
            if (familyListFile.isFile() && familyListFile.canWrite()) {
                    bufferedWriter.write(member);
                    bufferedWriter.write(" ");
                    bufferedWriter.write(date);
                    bufferedWriter.write(" ");

                    bufferedWriter.newLine();
                    bufferedWriter.close();
                    
                }
        } catch(IOException e) {
            System.out.println(e);
        }
            
        }   
        } catch(NullPointerException e) {
          JOptionPane.showMessageDialog(null, "가족 구성원에 포함되지 않았습니다.", "Result", JOptionPane.WARNING_MESSAGE);  
        }
        
        
    }//GEN-LAST:event_motherActionPerformed

    private void fatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fatherActionPerformed
               
        // 가족 배열 가져옴
        familyList();
       
        // 로그인 객체 생성 
        LoginForm lf = new LoginForm();
        
        // 팩토리 객체 VisitorAccessTrace
        VisitorAccessTrace vat = new VisitorAccessTrace();
        
        // VisitorAccess 객체 생성 후 인자에 VisitorAccessTrace 추가
        VisitorAccess visitorAccess = new VisitorAccess(vat);
        
        // 첫번째 방문자 객체를 생성
        try {
            Visitor v = visitorAccess.checkVisitor(family[0]);
            // 만약 v가 Family 객체에 속한다면 문이 열리고 닫히며, 해당 가족 구성원의 이름과 타임스탬프가 테이블에 기록
        if (v instanceof Family) {
            JOptionPane.showMessageDialog(null, "문이 열립니다.", "Result", JOptionPane.WARNING_MESSAGE);
            JOptionPane.showMessageDialog(null, v.getFamily() + "님이 방문하셨습니다.", "Result", JOptionPane.WARNING_MESSAGE);
            JOptionPane.showMessageDialog(null, "문이 닫힙니다.", "Result", JOptionPane.WARNING_MESSAGE);     
        try { 
            String member = v.getFamily();
            long timestamp = System.currentTimeMillis();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String date = dateFormat.format(timestamp);
            
            File familyListFile = new File(id+"List.txt");
            
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(familyListFile, true));
            
            if (familyListFile.isFile() && familyListFile.canWrite()) {
                    bufferedWriter.write(member);
                    bufferedWriter.write(" ");
                    bufferedWriter.write(date);
                    bufferedWriter.write(" ");

                    bufferedWriter.newLine();
                    bufferedWriter.close();
                    
                }
        } catch(IOException e) {
            System.out.println(e);
        }
            
        } 
        } catch(NullPointerException e) {
          JOptionPane.showMessageDialog(null, "가족 구성원에 포함되지 않았습니다.", "Result", JOptionPane.WARNING_MESSAGE);  
        }
    }//GEN-LAST:event_fatherActionPerformed

    private void brotherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brotherActionPerformed
                
        // 가족 배열 가져옴
        familyList();
       
        // 로그인 객체 생성 
        LoginForm lf = new LoginForm();
        
        // 팩토리 객체 VisitorAccessTrace
        VisitorAccessTrace vat = new VisitorAccessTrace();
        
        // VisitorAccess 객체 생성 후 인자에 VisitorAccessTrace 추가
        VisitorAccess visitorAccess = new VisitorAccess(vat);
        
        // 첫번째 방문자 객체를 생성
        try {
            Visitor v = visitorAccess.checkVisitor(family[2]);
            // 만약 v가 Family 객체에 속한다면 문이 열리고 닫히며, 해당 가족 구성원의 이름과 타임스탬프가 테이블에 기록
        if (v instanceof Family) {
            JOptionPane.showMessageDialog(null, "문이 열립니다.", "Result", JOptionPane.WARNING_MESSAGE);
            JOptionPane.showMessageDialog(null, v.getFamily() + "님이 방문하셨습니다.", "Result", JOptionPane.WARNING_MESSAGE);
            JOptionPane.showMessageDialog(null, "문이 닫힙니다.", "Result", JOptionPane.WARNING_MESSAGE);     
        try { 
            String member = v.getFamily();
            long timestamp = System.currentTimeMillis();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String date = dateFormat.format(timestamp);
            
            File familyListFile = new File(id+"List.txt");
            
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(familyListFile, true));
            
            if (familyListFile.isFile() && familyListFile.canWrite()) {
                    bufferedWriter.write(member);
                    bufferedWriter.write(" ");
                    bufferedWriter.write(date);
                    bufferedWriter.write(" ");

                    bufferedWriter.newLine();
                    bufferedWriter.close();
                    
                }
        } catch(IOException e) {
            System.out.println(e);
        }
        }   
        } catch(NullPointerException e) {
          JOptionPane.showMessageDialog(null, "가족 구성원에 포함되지 않았습니다.", "Result", JOptionPane.WARNING_MESSAGE);  
        }
    }//GEN-LAST:event_brotherActionPerformed

    private void sisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sisterActionPerformed
              
        // 가족 배열 가져옴
        familyList();
       
        // 로그인 객체 생성 
        LoginForm lf = new LoginForm();
        
        // 팩토리 객체 VisitorAccessTrace
        VisitorAccessTrace vat = new VisitorAccessTrace();
        
        // VisitorAccess 객체 생성 후 인자에 VisitorAccessTrace 추가
        VisitorAccess visitorAccess = new VisitorAccess(vat);
        
        // 첫번째 방문자 객체를 생성
        try {
            Visitor v = visitorAccess.checkVisitor(family[3]);
            // 만약 v가 Family 객체에 속한다면 문이 열리고 닫히며, 해당 가족 구성원의 이름과 타임스탬프가 테이블에 기록
        if (v instanceof Family) {
            JOptionPane.showMessageDialog(null, "문이 열립니다.", "Result", JOptionPane.WARNING_MESSAGE);
            JOptionPane.showMessageDialog(null, v.getFamily() + "님이 방문하셨습니다.", "Result", JOptionPane.WARNING_MESSAGE);
            JOptionPane.showMessageDialog(null, "문이 닫힙니다.", "Result", JOptionPane.WARNING_MESSAGE);     

        try { 
            String member = v.getFamily();
            long timestamp = System.currentTimeMillis();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String date = dateFormat.format(timestamp);
            
            File familyListFile = new File(id+"List.txt");
            
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(familyListFile, true));
            
            if (familyListFile.isFile() && familyListFile.canWrite()) {
                    bufferedWriter.write(member);
                    bufferedWriter.write(" ");
                    bufferedWriter.write(date);
                    bufferedWriter.write(" ");

                    bufferedWriter.newLine();
                    bufferedWriter.close();
                    
                }
        } catch(IOException e) {
            System.out.println(e);
        }
            
        }
        } catch(NullPointerException e) {
          JOptionPane.showMessageDialog(null, "가족 구성원에 포함되지 않았습니다.", "Result", JOptionPane.WARNING_MESSAGE);  
        }
    }//GEN-LAST:event_sisterActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CheckVisitor cv = new CheckVisitor();
        cv.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        MainDisplay main = new MainDisplay();
        main.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OpenDoor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OpenDoor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OpenDoor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OpenDoor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OpenDoor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brother;
    private javax.swing.JButton father;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton mother;
    private javax.swing.JButton outer;
    private javax.swing.JButton sister;
    // End of variables declaration//GEN-END:variables
}
